{"version":3,"sources":["../src/lib/breadcrumb/index.tsx","../src/lib/kv/index.tsx","../src/lib/raw/index.tsx","../src/lib/transfer/index.tsx"],"names":["Breadcrumb","React","breadcrumbDefault","__name","item","index","items","child","length","span","label","a","href","value","Item","key","Checkbox","Select","Radio","Tree","TreeSelect","defaults","kv","options","opts","__spreadValues","component","Component","otherProps","val","children","checkboxKv","args","selectKv","Option","radioKv","isButton","RadioComponent","Button","treeKv","cb","itemProps","TreeNode","title","treeSelectKv","raw","checkboxRaw","selectRaw","radioRaw","transferLabel"],"mappings":"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","sourcesContent":["import { Breadcrumb } from 'antd';\nimport React from 'react';\n\nexport const breadcrumbDefault = ({ item, index, items }) => {\n  const last = items?.length - 1 === index;\n  const child = last ? <span>{item.label}</span> : <a href={item.value}>{item.label}</a>;\n  return <Breadcrumb.Item key={index}>{child}</Breadcrumb.Item>;\n};\n","import React from 'react';\nimport { Checkbox, Select, Radio, Tree, TreeSelect } from 'antd';\n\ninterface Options {\n  component: React.ComponentType<any>;\n  value?: string;\n  label?: string;\n\n  [key: string]: any;\n}\n\nconst defaults = {\n  value: 'value',\n  label: 'label',\n};\n\n/**\n * KV component template, for key-value pair.\n * @param item\n * @param index\n * @param options\n */\nexport const kv = ({ item, index }, options: Options) => {\n  const opts = { ...defaults, ...options };\n  const { component: Component, value, label, ...otherProps } = opts;\n  const val = item[value];\n  const children = item[label];\n\n  return (\n    <Component key={index} value={val} {...otherProps}>\n      {children}\n    </Component>\n  );\n};\n\n// checkboxKv\nexport const checkboxKv = (args) => {\n  return kv(args, {\n    component: Checkbox,\n  });\n};\n\n// selectKv\nexport const selectKv = (args) => {\n  return kv(args, {\n    component: Select.Option,\n  });\n};\n\n// radioKv\nexport const radioKv = (args, opts) => {\n  const { isButton, ...otherProps } = opts || {};\n  const RadioComponent = isButton ? Radio.Button : Radio;\n  const radioProps = isButton ? otherProps : {};\n\n  return kv(args, {\n    component: RadioComponent,\n    ...radioProps,\n  });\n};\n\nexport const treeKv = ({ item }, cb) => {\n  const { value, label, ...itemProps } = item;\n  return (\n    <Tree.TreeNode key={value} title={label} {...itemProps}>\n      {cb()}\n    </Tree.TreeNode>\n  );\n};\n\nexport const treeSelectKv = ({ item }, cb) => {\n  const { value, label } = item;\n  return <TreeSelect.TreeNode key={value} value={value} title={label} children={cb()} />;\n};\n","import React from 'react';\nimport { Checkbox, Radio, Select } from 'antd';\n\ninterface Options {\n  component: React.ComponentType<any>;\n\n  [key: string]: any;\n}\n\n/**\n * Raw component template, for array of items.\n * @param item\n * @param index\n * @param options\n */\nexport const raw = ({ item, index }, options: Options) => {\n  const { component: Component, ...otherProps } = options;\n\n  return (\n    <Component key={index} value={item} {...otherProps}>\n      {item}\n    </Component>\n  );\n};\n\nexport const checkboxRaw = (args) => {\n  return raw(args, {\n    component: Checkbox,\n  });\n};\n\nexport const selectRaw = (args) => {\n  return raw(args, {\n    component: Select.Option,\n  });\n};\n\nexport const radioRaw = (args, opts) => {\n  const { isButton, ...otherProps } = opts || {};\n  const RadioComponent = isButton ? Radio.Button : Radio;\n  const radioProps = isButton ? otherProps : {};\n\n  return raw(args, {\n    component: RadioComponent,\n    ...radioProps,\n  });\n};\n","import React from 'react';\n\nconst defaults = {\n  label: 'label',\n};\n\nexport const transferLabel = ({ item }, options?: any): React.ReactNode => {\n  const opts = { ...defaults, ...options };\n  return item[opts?.label];\n};\n"]}