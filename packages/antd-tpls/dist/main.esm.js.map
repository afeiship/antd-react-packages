{"version":3,"sources":["../src/lib/breadcrumb/index.tsx","../src/lib/kv/index.tsx","../src/lib/raw/index.tsx","../src/lib/transfer/index.tsx"],"sourcesContent":["import { Breadcrumb } from 'antd';\nimport React from 'react';\n\nexport const breadcrumbDefault = ({ item, index, items }) => {\n  const last = items?.length - 1 === index;\n  const child = last ? <span>{item.label}</span> : <a href={item.value}>{item.label}</a>;\n  return <Breadcrumb.Item key={index}>{child}</Breadcrumb.Item>;\n};\n","import React from 'react';\nimport { Checkbox, Select, Radio, Tree, TreeSelect } from 'antd';\n\ninterface Options {\n  component: React.ComponentType<any>;\n  value?: string;\n  label?: string;\n\n  [key: string]: any;\n}\n\nconst defaults = {\n  value: 'value',\n  label: 'label',\n};\n\n/**\n * KV component template, for key-value pair.\n * @param item\n * @param index\n * @param options\n */\nexport const kv = ({ item, index }, options: Options) => {\n  const opts = { ...defaults, ...options };\n  const { component: Component, value, label, ...otherProps } = opts;\n  const val = item[value];\n  const children = item[label];\n\n  return (\n    <Component key={index} value={val} {...otherProps}>\n      {children}\n    </Component>\n  );\n};\n\n// checkboxKv\nexport const checkboxKv = (args) => {\n  return kv(args, {\n    component: Checkbox,\n  });\n};\n\n// selectKv\nexport const selectKv = (args) => {\n  return kv(args, {\n    component: Select.Option,\n  });\n};\n\n// radioKv\nexport const radioKv = (args, opts) => {\n  const { isButton, ...otherProps } = opts || {};\n  const RadioComponent = isButton ? Radio.Button : Radio;\n  const radioProps = isButton ? otherProps : {};\n\n  return kv(args, {\n    component: RadioComponent,\n    ...radioProps,\n  });\n};\n\nexport const treeKv = ({ item }, cb) => {\n  const { value, label, ...itemProps } = item;\n  return (\n    <Tree.TreeNode key={value} title={label} {...itemProps}>\n      {cb()}\n    </Tree.TreeNode>\n  );\n};\n\nexport const treeSelectKv = ({ item }, cb) => {\n  const { value, label } = item;\n  return <TreeSelect.TreeNode key={value} value={value} title={label} children={cb()} />;\n};\n","import React from 'react';\nimport { Checkbox, Radio, Select } from 'antd';\n\ninterface Options {\n  component: React.ComponentType<any>;\n\n  [key: string]: any;\n}\n\n/**\n * Raw component template, for array of items.\n * @param item\n * @param index\n * @param options\n */\nexport const raw = ({ item, index }, options: Options) => {\n  const { component: Component, ...otherProps } = options;\n\n  return (\n    <Component key={index} value={item} {...otherProps}>\n      {item}\n    </Component>\n  );\n};\n\nexport const checkboxRaw = (args) => {\n  return raw(args, {\n    component: Checkbox,\n  });\n};\n\nexport const selectRaw = (args) => {\n  return raw(args, {\n    component: Select.Option,\n  });\n};\n\nexport const radioRaw = (args, opts) => {\n  const { isButton, ...otherProps } = opts || {};\n  const RadioComponent = isButton ? Radio.Button : Radio;\n  const radioProps = isButton ? otherProps : {};\n\n  return raw(args, {\n    component: RadioComponent,\n    ...radioProps,\n  });\n};\n","import React from 'react';\n\nconst defaults = {\n  label: 'label',\n};\n\nexport const transferLabel = ({ item }, options?: any): React.ReactNode => {\n  const opts = { ...defaults, ...options };\n  return item[opts?.label];\n};\n"],"mappings":"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","names":["Breadcrumb","React","breadcrumbDefault","__name","item","index","items","child","length","React","span","label","a","href","value","Breadcrumb","Item","key","React","Checkbox","Select","Radio","Tree","TreeSelect","defaults","value","label","kv","__name","item","index","options","opts","__spreadValues","component","Component","otherProps","val","children","React","key","checkboxKv","args","Checkbox","selectKv","Select","Option","radioKv","isButton","RadioComponent","Radio","Button","treeKv","cb","itemProps","Tree","TreeNode","title","treeSelectKv","TreeSelect","React","Checkbox","Radio","Select","raw","__name","item","index","options","component","Component","otherProps","React","key","value","checkboxRaw","args","Checkbox","selectRaw","Select","Option","radioRaw","opts","isButton","RadioComponent","Radio","Button","__spreadValues","defaults","label","transferLabel","__name","item","options","opts","__spreadValues"]}